---
title: "Communication Patterns Analysis"
date: "26 June 2025"
filters:
  - shinylive
format: 
  html:
    resources:
      - shinylive-sw.js
---

```{shinylive-r}
#| standalone: true

# Load required packages
library(shiny)
library(ggplot2)
library(dplyr)
library(plotly)
library(DT)
library(visNetwork)
library(lubridate)
library(tidygraph)
library(ggraph)
library(tidyverse)
library(jsonlite)

# Data import and preparation
MC3 <- fromJSON("https://raw.githubusercontent.com/CHJ1/G8ProjectFolder/main/data/MC3_graph.json")
mc3_nodes <- as_tibble(MC3$nodes)
mc3_edges <- as_tibble(MC3$edges)

# Clean nodes and edges
mc3_nodes_cleaned <- mc3_nodes %>%
  mutate(id = as.character(id)) %>%
  filter(!is.na(id)) %>%
  distinct(id, .keep_all = TRUE) %>%
  select(-thing_collected)

mc3_edges_cleaned <- mc3_edges %>%
  rename(from_id = source, to_id = target) %>%
  mutate(across(c(from_id, to_id), as.character)) %>%
  filter(from_id %in% mc3_nodes_cleaned$id, to_id %in% mc3_nodes_cleaned$id) %>%
  filter(!is.na(from_id), !is.na(to_id))

node_index_lookup <- mc3_nodes_cleaned %>%
  mutate(.row_id = row_number()) %>%
  select(id, .row_id)

mc3_edges_indexed <- mc3_edges_cleaned %>%
  left_join(node_index_lookup, by = c("from_id" = "id")) %>%
  rename(from = .row_id) %>%
  left_join(node_index_lookup, by = c("to_id" = "id")) %>%
  rename(to = .row_id) %>%
  select(from, to, is_inferred, type) %>%
  filter(!is.na(from) & !is.na(to))

used_node_indices <- sort(unique(c(mc3_edges_indexed$from, mc3_edges_indexed$to)))
mc3_nodes_final <- mc3_nodes_cleaned %>%
  slice(used_node_indices) %>%
  mutate(new_index = row_number())

old_to_new_index <- tibble(
  old_index = used_node_indices,
  new_index = seq_along(used_node_indices)
)

mc3_edges_final <- mc3_edges_indexed %>%
  left_join(old_to_new_index, by = c("from" = "old_index")) %>%
  rename(from_new = new_index) %>%
  left_join(old_to_new_index, by = c("to" = "old_index")) %>%
  rename(to_new = new_index) %>%
  select(from = from_new, to = to_new, is_inferred, type)

# Prepare communication events
comm_nodes <- mc3_nodes_final %>%
  filter(type == "Event", sub_type == "Communication") %>%
  mutate(timestamp = ymd_hms(timestamp)) %>%
  filter(!is.na(timestamp)) %>%
  mutate(date = as.Date(timestamp), hour = hour(timestamp))

# UI
ui <- fluidPage(
  titlePanel("Communication Patterns Analysis"),
  sidebarLayout(
    sidebarPanel(
      dateRangeInput("date_filter", "Date Range:",
        start = min(comm_nodes$date), end = max(comm_nodes$date)),
      sliderInput("hour_filter", "Hour Range:", min = 0, max = 23, value = c(0, 23)),
      width = 3
    ),
    mainPanel(
      tabsetPanel(
        tabPanel("Daily", plotOutput("daily_plot")),
        tabPanel("Hourly", plotOutput("hourly_plot")),
        tabPanel("Heatmap", plotlyOutput("heatmap")),
        tabPanel("Messages", DTOutput("messages_table")),
        tabPanel("Network Graph", visNetworkOutput("network_plot", height = "800px"))
      ),
      width = 9
    )
  )
)

# Server
server <- function(input, output) {
  filtered_data <- reactive({
    comm_nodes %>%
      filter(date >= input$date_filter[1],
             date <= input$date_filter[2],
             hour >= input$hour_filter[1],
             hour <= input$hour_filter[2])
  })

  output$daily_plot <- renderPlot({
    daily_counts <- filtered_data() %>%
      group_by(date) %>%
      summarise(comm_count = n())
    ggplot(daily_counts, aes(x = date, y = comm_count)) +
      geom_col(fill = "steelblue") +
      geom_text(aes(label = comm_count), vjust = -0.5, size = 3) +
      geom_smooth(method = "lm", se = FALSE, color = "red", linetype = "dashed") +
      scale_x_date(date_labels = "%Y-%m-%d", expand = expansion(mult = c(0.01, 0.1))) +
      labs(title = "Daily Communication Volume", x = "Date", y = "Count") +
      theme_minimal()
  })

  output$hourly_plot <- renderPlot({
    hourly_totals <- filtered_data() %>%
      group_by(hour) %>%
      summarise(comm_count = n())
    ggplot(hourly_totals, aes(x = hour, y = comm_count)) +
      geom_col(fill = "steelblue") +
      geom_text(aes(label = comm_count), vjust = -0.5, size = 3) +
      geom_smooth(method = "lm", se = FALSE, color = "red", linetype = "dashed") +
      labs(title = "Hourly Communication Volume", x = "Hour", y = "Count") +
      theme_minimal()
  })

  output$heatmap <- renderPlotly({
    hourly_counts <- filtered_data() %>%
      group_by(date, hour) %>%
      summarise(comm_count = n(), .groups = "drop")
    p <- ggplot(hourly_counts, aes(
      x = hour, y = date, fill = comm_count,
      text = paste("Date:", date,
                   "<br>Hour:", hour,
                   "<br>Communications:", comm_count))) +
      geom_tile(color = "white") +
      scale_fill_gradient(low = "white", high = "firebrick") +
      scale_y_date(date_labels = "%Y-%m-%d") +
      labs(title = "Hourly Communication Patterns", x = "Hour", y = "Date") +
      theme_minimal()
    ggplotly(p, tooltip = "text")
  })

  output$messages_table <- renderDT({
    filtered_data() %>%
      arrange(desc(timestamp)) %>%
      mutate(Time = format(timestamp, "%Y-%m-%d %H:%M:%S")) %>%
      select(Time, Content = content)
  }, options = list(
      pageLength = 10,
      autoWidth = TRUE,
      scrollX = TRUE,
      columnDefs = list(
        list(width = '20%', targets = 0),
        list(width = '80%', targets = 1)
      )
    ),
    rownames = FALSE
  )

  output$network_plot <- renderVisNetwork({
    req(filtered_data())
    peak_comm_ids <- filtered_data() %>% pull(new_index)
    peak_edges <- mc3_edges_final %>%
      filter(from %in% peak_comm_ids | to %in% peak_comm_ids)
    used_indices <- unique(c(peak_edges$from, peak_edges$to))
    peak_nodes_sub <- mc3_nodes_final %>%
      filter(new_index %in% used_indices) %>%
      mutate(sub_index = row_number())
    peak_edges_sub <- peak_edges %>%
      left_join(select(peak_nodes_sub, old_index = new_index, from_sub = sub_index),
                by = c("from" = "old_index")) %>%
      left_join(select(peak_nodes_sub, old_index = new_index, to_sub = sub_index),
                by = c("to" = "old_index")) %>%
      select(from = from_sub, to = to_sub, is_inferred, type) %>%
      filter(!is.na(from) & !is.na(to)) %>%
      mutate(id = row_number(),
             arrows = ifelse(is_inferred, "to;from", "to"),
             dashes = is_inferred,
             title = paste("Edge type:", type))
    nodes_vis <- peak_nodes_sub %>%
      mutate(
        id = sub_index,
        label = paste0(label, "\n(", type, ")"),
        group = type,
        title = paste0(
          "Name: ", label, 
          "\nType: ", type,
          if ("sub_type" %in% names(.)) paste0("\nSubtype: ", sub_type) else "",
          "\nConnections: ", purrr::map_dbl(sub_index, ~sum(peak_edges_sub$from == .x | peak_edges_sub$to == .x))
        )
      )
    visNetwork(nodes_vis, peak_edges_sub, height = "800px", width = "100%") %>%
      visOptions(
        highlightNearest = list(enabled = TRUE, degree = 2, hover = TRUE),
        nodesIdSelection = TRUE,
        selectedBy = list(variable = "group", multiple = TRUE)
      ) %>%
      visPhysics(stabilization = TRUE) %>%
      visInteraction(navigationButtons = TRUE) %>%
      visLegend()
  })
}

shinyApp(ui, server)
```
