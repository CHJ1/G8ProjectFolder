[
  {
    "objectID": "about.html",
    "href": "about.html",
    "title": "About",
    "section": "",
    "text": "About this site\n\n1 + 1\n\n[1] 2"
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Group 8â€™s Project",
    "section": "",
    "text": "This is a Quarto website.\nTo learn more about Quarto websites visit https://quarto.org/docs/websites.\n\n1 + 1\n\n[1] 2"
  },
  {
    "objectID": "Test.html",
    "href": "Test.html",
    "title": "Communication Patterns Analysis",
    "section": "",
    "text": "#| '!! shinylive warning !!': |\n#|   shinylive does not work in self-contained HTML documents.\n#|   Please set `embed-resources: false` in your metadata.\n#| standalone: true\n\n# Load required packages\nlibrary(shiny)\nlibrary(ggplot2)\nlibrary(dplyr)\nlibrary(plotly)\nlibrary(DT)\nlibrary(visNetwork)\nlibrary(lubridate)\nlibrary(tidygraph)\nlibrary(ggraph)\nlibrary(tidyverse)\nlibrary(jsonlite)\n\n# Data import and preparation\nMC3 &lt;- fromJSON(\"https://raw.githubusercontent.com/CHJ1/G8ProjectFolder/main/data/MC3_graph.json\")\nmc3_nodes &lt;- as_tibble(MC3$nodes)\nmc3_edges &lt;- as_tibble(MC3$edges)\n\n# Clean nodes and edges\nmc3_nodes_cleaned &lt;- mc3_nodes %&gt;%\n  mutate(id = as.character(id)) %&gt;%\n  filter(!is.na(id)) %&gt;%\n  distinct(id, .keep_all = TRUE) %&gt;%\n  select(-thing_collected)\n\nmc3_edges_cleaned &lt;- mc3_edges %&gt;%\n  rename(from_id = source, to_id = target) %&gt;%\n  mutate(across(c(from_id, to_id), as.character)) %&gt;%\n  filter(from_id %in% mc3_nodes_cleaned$id, to_id %in% mc3_nodes_cleaned$id) %&gt;%\n  filter(!is.na(from_id), !is.na(to_id))\n\nnode_index_lookup &lt;- mc3_nodes_cleaned %&gt;%\n  mutate(.row_id = row_number()) %&gt;%\n  select(id, .row_id)\n\nmc3_edges_indexed &lt;- mc3_edges_cleaned %&gt;%\n  left_join(node_index_lookup, by = c(\"from_id\" = \"id\")) %&gt;%\n  rename(from = .row_id) %&gt;%\n  left_join(node_index_lookup, by = c(\"to_id\" = \"id\")) %&gt;%\n  rename(to = .row_id) %&gt;%\n  select(from, to, is_inferred, type) %&gt;%\n  filter(!is.na(from) & !is.na(to))\n\nused_node_indices &lt;- sort(unique(c(mc3_edges_indexed$from, mc3_edges_indexed$to)))\nmc3_nodes_final &lt;- mc3_nodes_cleaned %&gt;%\n  slice(used_node_indices) %&gt;%\n  mutate(new_index = row_number())\n\nold_to_new_index &lt;- tibble(\n  old_index = used_node_indices,\n  new_index = seq_along(used_node_indices)\n)\n\nmc3_edges_final &lt;- mc3_edges_indexed %&gt;%\n  left_join(old_to_new_index, by = c(\"from\" = \"old_index\")) %&gt;%\n  rename(from_new = new_index) %&gt;%\n  left_join(old_to_new_index, by = c(\"to\" = \"old_index\")) %&gt;%\n  rename(to_new = new_index) %&gt;%\n  select(from = from_new, to = to_new, is_inferred, type)\n\n# Prepare communication events\ncomm_nodes &lt;- mc3_nodes_final %&gt;%\n  filter(type == \"Event\", sub_type == \"Communication\") %&gt;%\n  mutate(timestamp = ymd_hms(timestamp)) %&gt;%\n  filter(!is.na(timestamp)) %&gt;%\n  mutate(date = as.Date(timestamp), hour = hour(timestamp))\n\n# UI\nui &lt;- fluidPage(\n  titlePanel(\"Communication Patterns Analysis\"),\n  sidebarLayout(\n    sidebarPanel(\n      dateRangeInput(\"date_filter\", \"Date Range:\",\n        start = min(comm_nodes$date), end = max(comm_nodes$date)),\n      sliderInput(\"hour_filter\", \"Hour Range:\", min = 0, max = 23, value = c(0, 23)),\n      width = 3\n    ),\n    mainPanel(\n      tabsetPanel(\n        tabPanel(\"Daily\", plotOutput(\"daily_plot\")),\n        tabPanel(\"Hourly\", plotOutput(\"hourly_plot\")),\n        tabPanel(\"Heatmap\", plotlyOutput(\"heatmap\")),\n        tabPanel(\"Messages\", DTOutput(\"messages_table\")),\n        tabPanel(\"Network Graph\", visNetworkOutput(\"network_plot\", height = \"800px\"))\n      ),\n      width = 9\n    )\n  )\n)\n\n# Server\nserver &lt;- function(input, output) {\n  filtered_data &lt;- reactive({\n    comm_nodes %&gt;%\n      filter(date &gt;= input$date_filter[1],\n             date &lt;= input$date_filter[2],\n             hour &gt;= input$hour_filter[1],\n             hour &lt;= input$hour_filter[2])\n  })\n\n  output$daily_plot &lt;- renderPlot({\n    daily_counts &lt;- filtered_data() %&gt;%\n      group_by(date) %&gt;%\n      summarise(comm_count = n())\n    ggplot(daily_counts, aes(x = date, y = comm_count)) +\n      geom_col(fill = \"steelblue\") +\n      geom_text(aes(label = comm_count), vjust = -0.5, size = 3) +\n      geom_smooth(method = \"lm\", se = FALSE, color = \"red\", linetype = \"dashed\") +\n      scale_x_date(date_labels = \"%Y-%m-%d\", expand = expansion(mult = c(0.01, 0.1))) +\n      labs(title = \"Daily Communication Volume\", x = \"Date\", y = \"Count\") +\n      theme_minimal()\n  })\n\n  output$hourly_plot &lt;- renderPlot({\n    hourly_totals &lt;- filtered_data() %&gt;%\n      group_by(hour) %&gt;%\n      summarise(comm_count = n())\n    ggplot(hourly_totals, aes(x = hour, y = comm_count)) +\n      geom_col(fill = \"steelblue\") +\n      geom_text(aes(label = comm_count), vjust = -0.5, size = 3) +\n      geom_smooth(method = \"lm\", se = FALSE, color = \"red\", linetype = \"dashed\") +\n      labs(title = \"Hourly Communication Volume\", x = \"Hour\", y = \"Count\") +\n      theme_minimal()\n  })\n\n  output$heatmap &lt;- renderPlotly({\n    hourly_counts &lt;- filtered_data() %&gt;%\n      group_by(date, hour) %&gt;%\n      summarise(comm_count = n(), .groups = \"drop\")\n    p &lt;- ggplot(hourly_counts, aes(\n      x = hour, y = date, fill = comm_count,\n      text = paste(\"Date:\", date,\n                   \"&lt;br&gt;Hour:\", hour,\n                   \"&lt;br&gt;Communications:\", comm_count))) +\n      geom_tile(color = \"white\") +\n      scale_fill_gradient(low = \"white\", high = \"firebrick\") +\n      scale_y_date(date_labels = \"%Y-%m-%d\") +\n      labs(title = \"Hourly Communication Patterns\", x = \"Hour\", y = \"Date\") +\n      theme_minimal()\n    ggplotly(p, tooltip = \"text\")\n  })\n\n  output$messages_table &lt;- renderDT({\n    filtered_data() %&gt;%\n      arrange(desc(timestamp)) %&gt;%\n      mutate(Time = format(timestamp, \"%Y-%m-%d %H:%M:%S\")) %&gt;%\n      select(Time, Content = content)\n  }, options = list(\n      pageLength = 10,\n      autoWidth = TRUE,\n      scrollX = TRUE,\n      columnDefs = list(\n        list(width = '20%', targets = 0),\n        list(width = '80%', targets = 1)\n      )\n    ),\n    rownames = FALSE\n  )\n\n  output$network_plot &lt;- renderVisNetwork({\n    req(filtered_data())\n    peak_comm_ids &lt;- filtered_data() %&gt;% pull(new_index)\n    peak_edges &lt;- mc3_edges_final %&gt;%\n      filter(from %in% peak_comm_ids | to %in% peak_comm_ids)\n    used_indices &lt;- unique(c(peak_edges$from, peak_edges$to))\n    peak_nodes_sub &lt;- mc3_nodes_final %&gt;%\n      filter(new_index %in% used_indices) %&gt;%\n      mutate(sub_index = row_number())\n    peak_edges_sub &lt;- peak_edges %&gt;%\n      left_join(select(peak_nodes_sub, old_index = new_index, from_sub = sub_index),\n                by = c(\"from\" = \"old_index\")) %&gt;%\n      left_join(select(peak_nodes_sub, old_index = new_index, to_sub = sub_index),\n                by = c(\"to\" = \"old_index\")) %&gt;%\n      select(from = from_sub, to = to_sub, is_inferred, type) %&gt;%\n      filter(!is.na(from) & !is.na(to)) %&gt;%\n      mutate(id = row_number(),\n             arrows = ifelse(is_inferred, \"to;from\", \"to\"),\n             dashes = is_inferred,\n             title = paste(\"Edge type:\", type))\n    nodes_vis &lt;- peak_nodes_sub %&gt;%\n      mutate(\n        id = sub_index,\n        label = paste0(label, \"\\n(\", type, \")\"),\n        group = type,\n        title = paste0(\n          \"Name: \", label, \n          \"\\nType: \", type,\n          if (\"sub_type\" %in% names(.)) paste0(\"\\nSubtype: \", sub_type) else \"\",\n          \"\\nConnections: \", purrr::map_dbl(sub_index, ~sum(peak_edges_sub$from == .x | peak_edges_sub$to == .x))\n        )\n      )\n    visNetwork(nodes_vis, peak_edges_sub, height = \"800px\", width = \"100%\") %&gt;%\n      visOptions(\n        highlightNearest = list(enabled = TRUE, degree = 2, hover = TRUE),\n        nodesIdSelection = TRUE,\n        selectedBy = list(variable = \"group\", multiple = TRUE)\n      ) %&gt;%\n      visPhysics(stabilization = TRUE) %&gt;%\n      visInteraction(navigationButtons = TRUE) %&gt;%\n      visLegend()\n  })\n}\n\nshinyApp(ui, server)"
  },
  {
    "objectID": "Test copy.html",
    "href": "Test copy.html",
    "title": "Test Shinylive",
    "section": "",
    "text": "#| '!! shinylive warning !!': |\n#|   shinylive does not work in self-contained HTML documents.\n#|   Please set `embed-resources: false` in your metadata.\n#| standalone: true\nlibrary(jsonlite)\nx &lt;- fromJSON(\"https://raw.githubusercontent.com/CHJ1/G8ProjectFolder/main/data/MC3_graph.json\")\nprint(str(x))"
  },
  {
    "objectID": "Communication Patterns Analysis.html",
    "href": "Communication Patterns Analysis.html",
    "title": "Communication Patterns Analysis",
    "section": "",
    "text": "#| '!! shinylive warning !!': |\n#|   shinylive does not work in self-contained HTML documents.\n#|   Please set `embed-resources: false` in your metadata.\n#| standalone: true\n\n# Load required packages\nlibrary(shiny)\nlibrary(ggplot2)\nlibrary(dplyr)\nlibrary(plotly)\nlibrary(DT)\nlibrary(visNetwork)\nlibrary(lubridate)\nlibrary(tidygraph)\nlibrary(ggraph)\nlibrary(tidyverse)\nlibrary(jsonlite)\n\n# Data import and preparation\nMC3 &lt;- fromJSON(\"https://raw.githubusercontent.com/CHJ1/G8ProjectFolder/main/data/MC3_graph.json\")\nmc3_nodes &lt;- as_tibble(MC3$nodes)\nmc3_edges &lt;- as_tibble(MC3$edges)\n\n# Clean nodes and edges\nmc3_nodes_cleaned &lt;- mc3_nodes %&gt;%\n  mutate(id = as.character(id)) %&gt;%\n  filter(!is.na(id)) %&gt;%\n  distinct(id, .keep_all = TRUE) %&gt;%\n  select(-thing_collected)\n\nmc3_edges_cleaned &lt;- mc3_edges %&gt;%\n  rename(from_id = source, to_id = target) %&gt;%\n  mutate(across(c(from_id, to_id), as.character)) %&gt;%\n  filter(from_id %in% mc3_nodes_cleaned$id, to_id %in% mc3_nodes_cleaned$id) %&gt;%\n  filter(!is.na(from_id), !is.na(to_id))\n\nnode_index_lookup &lt;- mc3_nodes_cleaned %&gt;%\n  mutate(.row_id = row_number()) %&gt;%\n  select(id, .row_id)\n\nmc3_edges_indexed &lt;- mc3_edges_cleaned %&gt;%\n  left_join(node_index_lookup, by = c(\"from_id\" = \"id\")) %&gt;%\n  rename(from = .row_id) %&gt;%\n  left_join(node_index_lookup, by = c(\"to_id\" = \"id\")) %&gt;%\n  rename(to = .row_id) %&gt;%\n  select(from, to, is_inferred, type) %&gt;%\n  filter(!is.na(from) & !is.na(to))\n\nused_node_indices &lt;- sort(unique(c(mc3_edges_indexed$from, mc3_edges_indexed$to)))\nmc3_nodes_final &lt;- mc3_nodes_cleaned %&gt;%\n  slice(used_node_indices) %&gt;%\n  mutate(new_index = row_number())\n\nold_to_new_index &lt;- tibble(\n  old_index = used_node_indices,\n  new_index = seq_along(used_node_indices)\n)\n\nmc3_edges_final &lt;- mc3_edges_indexed %&gt;%\n  left_join(old_to_new_index, by = c(\"from\" = \"old_index\")) %&gt;%\n  rename(from_new = new_index) %&gt;%\n  left_join(old_to_new_index, by = c(\"to\" = \"old_index\")) %&gt;%\n  rename(to_new = new_index) %&gt;%\n  select(from = from_new, to = to_new, is_inferred, type)\n\n# Prepare communication events\ncomm_nodes &lt;- mc3_nodes_final %&gt;%\n  filter(type == \"Event\", sub_type == \"Communication\") %&gt;%\n  mutate(timestamp = ymd_hms(timestamp)) %&gt;%\n  filter(!is.na(timestamp)) %&gt;%\n  mutate(date = as.Date(timestamp), hour = hour(timestamp))\n\n# UI\nui &lt;- fluidPage(\n  titlePanel(\"Communication Patterns Analysis\"),\n  sidebarLayout(\n    sidebarPanel(\n      dateRangeInput(\"date_filter\", \"Date Range:\",\n        start = min(comm_nodes$date), end = max(comm_nodes$date)),\n      sliderInput(\"hour_filter\", \"Hour Range:\", min = 0, max = 23, value = c(0, 23)),\n      width = 3\n    ),\n    mainPanel(\n      tabsetPanel(\n        tabPanel(\"Daily\", plotOutput(\"daily_plot\")),\n        tabPanel(\"Hourly\", plotOutput(\"hourly_plot\")),\n        tabPanel(\"Heatmap\", plotlyOutput(\"heatmap\")),\n        tabPanel(\"Messages\", DTOutput(\"messages_table\")),\n        tabPanel(\"Network Graph\", visNetworkOutput(\"network_plot\", height = \"800px\"))\n      ),\n      width = 9\n    )\n  )\n)\n\n# Server\nserver &lt;- function(input, output) {\n  filtered_data &lt;- reactive({\n    comm_nodes %&gt;%\n      filter(date &gt;= input$date_filter[1],\n             date &lt;= input$date_filter[2],\n             hour &gt;= input$hour_filter[1],\n             hour &lt;= input$hour_filter[2])\n  })\n\n  output$daily_plot &lt;- renderPlot({\n    daily_counts &lt;- filtered_data() %&gt;%\n      group_by(date) %&gt;%\n      summarise(comm_count = n())\n    ggplot(daily_counts, aes(x = date, y = comm_count)) +\n      geom_col(fill = \"steelblue\") +\n      geom_text(aes(label = comm_count), vjust = -0.5, size = 3) +\n      geom_smooth(method = \"lm\", se = FALSE, color = \"red\", linetype = \"dashed\") +\n      scale_x_date(date_labels = \"%Y-%m-%d\", expand = expansion(mult = c(0.01, 0.1))) +\n      labs(title = \"Daily Communication Volume\", x = \"Date\", y = \"Count\") +\n      theme_minimal()\n  })\n\n  output$hourly_plot &lt;- renderPlot({\n    hourly_totals &lt;- filtered_data() %&gt;%\n      group_by(hour) %&gt;%\n      summarise(comm_count = n())\n    ggplot(hourly_totals, aes(x = hour, y = comm_count)) +\n      geom_col(fill = \"steelblue\") +\n      geom_text(aes(label = comm_count), vjust = -0.5, size = 3) +\n      geom_smooth(method = \"lm\", se = FALSE, color = \"red\", linetype = \"dashed\") +\n      labs(title = \"Hourly Communication Volume\", x = \"Hour\", y = \"Count\") +\n      theme_minimal()\n  })\n\n  output$heatmap &lt;- renderPlotly({\n    hourly_counts &lt;- filtered_data() %&gt;%\n      group_by(date, hour) %&gt;%\n      summarise(comm_count = n(), .groups = \"drop\")\n    p &lt;- ggplot(hourly_counts, aes(\n      x = hour, y = date, fill = comm_count,\n      text = paste(\"Date:\", date,\n                   \"&lt;br&gt;Hour:\", hour,\n                   \"&lt;br&gt;Communications:\", comm_count))) +\n      geom_tile(color = \"white\") +\n      scale_fill_gradient(low = \"white\", high = \"firebrick\") +\n      scale_y_date(date_labels = \"%Y-%m-%d\") +\n      labs(title = \"Hourly Communication Patterns\", x = \"Hour\", y = \"Date\") +\n      theme_minimal()\n    ggplotly(p, tooltip = \"text\")\n  })\n\n  output$messages_table &lt;- renderDT({\n    filtered_data() %&gt;%\n      arrange(desc(timestamp)) %&gt;%\n      mutate(Time = format(timestamp, \"%Y-%m-%d %H:%M:%S\")) %&gt;%\n      select(Time, Content = content)\n  }, options = list(\n      pageLength = 10,\n      autoWidth = TRUE,\n      scrollX = TRUE,\n      columnDefs = list(\n        list(width = '20%', targets = 0),\n        list(width = '80%', targets = 1)\n      )\n    ),\n    rownames = FALSE\n  )\n\n  output$network_plot &lt;- renderVisNetwork({\n    req(filtered_data())\n    peak_comm_ids &lt;- filtered_data() %&gt;% pull(new_index)\n    peak_edges &lt;- mc3_edges_final %&gt;%\n      filter(from %in% peak_comm_ids | to %in% peak_comm_ids)\n    used_indices &lt;- unique(c(peak_edges$from, peak_edges$to))\n    peak_nodes_sub &lt;- mc3_nodes_final %&gt;%\n      filter(new_index %in% used_indices) %&gt;%\n      mutate(sub_index = row_number())\n    peak_edges_sub &lt;- peak_edges %&gt;%\n      left_join(select(peak_nodes_sub, old_index = new_index, from_sub = sub_index),\n                by = c(\"from\" = \"old_index\")) %&gt;%\n      left_join(select(peak_nodes_sub, old_index = new_index, to_sub = sub_index),\n                by = c(\"to\" = \"old_index\")) %&gt;%\n      select(from = from_sub, to = to_sub, is_inferred, type) %&gt;%\n      filter(!is.na(from) & !is.na(to)) %&gt;%\n      mutate(id = row_number(),\n             arrows = ifelse(is_inferred, \"to;from\", \"to\"),\n             dashes = is_inferred,\n             title = paste(\"Edge type:\", type))\n    nodes_vis &lt;- peak_nodes_sub %&gt;%\n      mutate(\n        id = sub_index,\n        label = paste0(label, \"\\n(\", type, \")\"),\n        group = type,\n        title = paste0(\n          \"Name: \", label, \n          \"\\nType: \", type,\n          if (\"sub_type\" %in% names(.)) paste0(\"\\nSubtype: \", sub_type) else \"\",\n          \"\\nConnections: \", purrr::map_dbl(sub_index, ~sum(peak_edges_sub$from == .x | peak_edges_sub$to == .x))\n        )\n      )\n    visNetwork(nodes_vis, peak_edges_sub, height = \"800px\", width = \"100%\") %&gt;%\n      visOptions(\n        highlightNearest = list(enabled = TRUE, degree = 2, hover = TRUE),\n        nodesIdSelection = TRUE,\n        selectedBy = list(variable = \"group\", multiple = TRUE)\n      ) %&gt;%\n      visPhysics(stabilization = TRUE) %&gt;%\n      visInteraction(navigationButtons = TRUE) %&gt;%\n      visLegend()\n  })\n}\n\nshinyApp(ui, server)"
  }
]