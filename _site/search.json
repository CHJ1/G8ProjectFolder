[
  {
    "objectID": "about.html",
    "href": "about.html",
    "title": "About",
    "section": "",
    "text": "About this site\n\n1 + 1\n\n[1] 2"
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Group 8’s Project",
    "section": "",
    "text": "This is a Quarto website.\nTo learn more about Quarto websites visit https://quarto.org/docs/websites.\n\n1 + 1\n\n[1] 2"
  },
  {
    "objectID": "Test.html",
    "href": "Test.html",
    "title": "Communication Patterns Analysis",
    "section": "",
    "text": "#| standalone: true\n\nLoad required packages\nlibrary(shiny) library(ggplot2) library(dplyr) library(plotly) library(DT) library(visNetwork) library(lubridate) library(tidygraph) library(ggraph) library(tidyverse) library(jsonlite)\n\n\nData import and preparation\nMC3 &lt;- fromJSON(“data/MC3_graph.json”) mc3_nodes &lt;- as_tibble(MC3\\(nodes) mc3_edges &lt;- as_tibble(MC3\\)edges)\n\n\nClean nodes and edges\nmc3_nodes_cleaned &lt;- mc3_nodes %&gt;% mutate(id = as.character(id)) %&gt;% filter(!is.na(id)) %&gt;% distinct(id, .keep_all = TRUE) %&gt;% select(-thing_collected)\nmc3_edges_cleaned &lt;- mc3_edges %&gt;% rename(from_id = source, to_id = target) %&gt;% mutate(across(c(from_id, to_id), as.character)) %&gt;% filter(from_id %in% mc3_nodes_cleaned\\(id, to_id %in% mc3_nodes_cleaned\\)id) %&gt;% filter(!is.na(from_id), !is.na(to_id))\nnode_index_lookup &lt;- mc3_nodes_cleaned %&gt;% mutate(.row_id = row_number()) %&gt;% select(id, .row_id)\nmc3_edges_indexed &lt;- mc3_edges_cleaned %&gt;% left_join(node_index_lookup, by = c(“from_id” = “id”)) %&gt;% rename(from = .row_id) %&gt;% left_join(node_index_lookup, by = c(“to_id” = “id”)) %&gt;% rename(to = .row_id) %&gt;% select(from, to, is_inferred, type) %&gt;% filter(!is.na(from) & !is.na(to))\nused_node_indices &lt;- sort(unique(c(mc3_edges_indexed\\(from, mc3_edges_indexed\\)to))) mc3_nodes_final &lt;- mc3_nodes_cleaned %&gt;% slice(used_node_indices) %&gt;% mutate(new_index = row_number())\nold_to_new_index &lt;- tibble( old_index = used_node_indices, new_index = seq_along(used_node_indices) )\nmc3_edges_final &lt;- mc3_edges_indexed %&gt;% left_join(old_to_new_index, by = c(“from” = “old_index”)) %&gt;% rename(from_new = new_index) %&gt;% left_join(old_to_new_index, by = c(“to” = “old_index”)) %&gt;% rename(to_new = new_index) %&gt;% select(from = from_new, to = to_new, is_inferred, type)\n\n\nPrepare communication events\ncomm_nodes &lt;- mc3_nodes_final %&gt;% filter(type == “Event”, sub_type == “Communication”) %&gt;% mutate(timestamp = ymd_hms(timestamp)) %&gt;% filter(!is.na(timestamp)) %&gt;% mutate(date = as.Date(timestamp), hour = hour(timestamp))\n\n\nUI\nui &lt;- fluidPage( titlePanel(“Communication Patterns Analysis”), sidebarLayout( sidebarPanel( dateRangeInput(“date_filter”, “Date Range:”, start = min(comm_nodes\\(date), end = max(comm_nodes\\)date)), sliderInput(“hour_filter”, “Hour Range:”, min = 0, max = 23, value = c(0, 23)), width = 3 ), mainPanel( tabsetPanel( tabPanel(“Daily”, plotOutput(“daily_plot”)), tabPanel(“Hourly”, plotOutput(“hourly_plot”)), tabPanel(“Heatmap”, plotlyOutput(“heatmap”)), tabPanel(“Messages”, DTOutput(“messages_table”)), tabPanel(“Network Graph”, visNetworkOutput(“network_plot”, height = “800px”)) ), width = 9 ) ) )\n\n\nServer\nserver &lt;- function(input, output) { filtered_data &lt;- reactive({ comm_nodes %&gt;% filter(date &gt;= input\\(date_filter[1],  date &lt;= input\\)date_filter[2], hour &gt;= input\\(hour_filter[1],  hour &lt;= input\\)hour_filter[2]) })\noutput$daily_plot &lt;- renderPlot({ daily_counts &lt;- filtered_data() %&gt;% group_by(date) %&gt;% summarise(comm_count = n()) ggplot(daily_counts, aes(x = date, y = comm_count)) + geom_col(fill = “steelblue”) + geom_text(aes(label = comm_count), vjust = -0.5, size = 3) + geom_smooth(method = “lm”, se = FALSE, color = “red”, linetype = “dashed”) + scale_x_date(date_labels = “%Y-%m-%d”, expand = expansion(mult = c(0.01, 0.1))) + labs(title = “Daily Communication Volume”, x = “Date”, y = “Count”) + theme_minimal() })\noutput$hourly_plot &lt;- renderPlot({ hourly_totals &lt;- filtered_data() %&gt;% group_by(hour) %&gt;% summarise(comm_count = n()) ggplot(hourly_totals, aes(x = hour, y = comm_count)) + geom_col(fill = “steelblue”) + geom_text(aes(label = comm_count), vjust = -0.5, size = 3) + geom_smooth(method = “lm”, se = FALSE, color = “red”, linetype = “dashed”) + labs(title = “Hourly Communication Volume”, x = “Hour”, y = “Count”) + theme_minimal() })\noutput$heatmap &lt;- renderPlotly({ hourly_counts &lt;- filtered_data() %&gt;% group_by(date, hour) %&gt;% summarise(comm_count = n(), .groups = “drop”) p &lt;- ggplot(hourly_counts, aes( x = hour, y = date, fill = comm_count, text = paste(“Date:”, date, “Hour:”, hour, “Communications:”, comm_count))) + geom_tile(color = “white”) + scale_fill_gradient(low = “white”, high = “firebrick”) + scale_y_date(date_labels = “%Y-%m-%d”) + labs(title = “Hourly Communication Patterns”, x = “Hour”, y = “Date”) + theme_minimal() ggplotly(p, tooltip = “text”) })\noutput$messages_table &lt;- renderDT({ filtered_data() %&gt;% arrange(desc(timestamp)) %&gt;% mutate(Time = format(timestamp, “%Y-%m-%d %H:%M:%S”)) %&gt;% select(Time, Content = content) }, options = list( pageLength = 10, autoWidth = TRUE, scrollX = TRUE, columnDefs = list( list(width = ‘20%’, targets = 0), list(width = ‘80%’, targets = 1) ) ), rownames = FALSE )\noutput\\(network_plot &lt;- renderVisNetwork({  req(filtered_data())  peak_comm_ids &lt;- filtered_data() %&gt;% pull(new_index)  peak_edges &lt;- mc3_edges_final %&gt;%  filter(from %in% peak_comm_ids | to %in% peak_comm_ids)  used_indices &lt;- unique(c(peak_edges\\)from, peak_edges\\(to))  peak_nodes_sub &lt;- mc3_nodes_final %&gt;%  filter(new_index %in% used_indices) %&gt;%  mutate(sub_index = row_number())  peak_edges_sub &lt;- peak_edges %&gt;%  left_join(select(peak_nodes_sub, old_index = new_index, from_sub = sub_index),  by = c(\"from\" = \"old_index\")) %&gt;%  left_join(select(peak_nodes_sub, old_index = new_index, to_sub = sub_index),  by = c(\"to\" = \"old_index\")) %&gt;%  select(from = from_sub, to = to_sub, is_inferred, type) %&gt;%  filter(!is.na(from) & !is.na(to)) %&gt;%  mutate(id = row_number(),  arrows = ifelse(is_inferred, \"to;from\", \"to\"),  dashes = is_inferred,  title = paste(\"Edge type:\", type))  nodes_vis &lt;- peak_nodes_sub %&gt;%  mutate(  id = sub_index,  label = paste0(label, \"\\n(\", type, \")\"),  group = type,  title = paste0(  \"Name: \", label,  \"\\nType: \", type,  if (\"sub_type\" %in% names(.)) paste0(\"\\nSubtype: \", sub_type) else \"\",  \"\\nConnections: \", purrr::map_dbl(sub_index, ~sum(peak_edges_sub\\)from == .x | peak_edges_sub$to == .x)) ) ) visNetwork(nodes_vis, peak_edges_sub, height = “800px”, width = “100%”) %&gt;% visOptions( highlightNearest = list(enabled = TRUE, degree = 2, hover = TRUE), nodesIdSelection = TRUE, selectedBy = list(variable = “group”, multiple = TRUE) ) %&gt;% visPhysics(stabilization = TRUE) %&gt;% visInteraction(navigationButtons = TRUE) %&gt;% visLegend() }) }\nshinyApp(ui, server)"
  }
]